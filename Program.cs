using System; // прицепляем библиотеки с сущностями в данном случае базовый класс System
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace MyTut // пространство имен, это общая обертка для всех разработанных пользователем данных
{
    class Program //класс в котором находится точка входа в программу 
    {
        static void Main(string[] args) // для компилятора точка входа в программу 
        {
            // здесь происходит вызов наших методов и свойств 

            ClassName classname = new ClassName(); // создаем переменную classname типа нашего класса ClassName и 
            //создаем новый объект в памяти с помощью оператора new, объект типа нашего класса ClassName. 
            // тип создаваемой переменной может на прямую не совпадать с типом создаваемого объекта.

            Object newobject = new ClassName(); // Почти все сущности в шарпе являются наследниками системного класса Object 

            // потому могут быть в него помещены
            // но надо понимать что newobject это не сам объект а всего лишь ссылка на адрес в памяти.


            //Для демонстрации 
            // выше прицепленный класс систем дает доступ к классу Console 
            // в котором в свою очередь есть метод WriteLine 
            // WriteLine выводит строку на консоль и переводит каретку на новую строку
            // WriteLine статический метод т.е. метод вызывать который можно без создания экземпляра (объекта в памяти) класса которому он принадлежит
            // Выводим на консоль этот текст и значения переменных
            // для начала узнаем что содержат наши переменные через свойства
            Console.WriteLine("Первое свойство для переменной _а : " + classname.AutoPorp);
            Console.WriteLine("Второе свойство для переменной _b : " + classname.FirstProp);
            Console.WriteLine("Переменная iB содержит: " + classname.iB);


            // используем наши методы их класса ClassName
            // т.к. мы объявили переменную и создали объект, то для доступа к сущностям класса можно использовать оператор "." (точка)
            Console.WriteLine("\nИспользуем свойства");
            classname.AutoPorp = 10; //автоматическое свойства создает переменную и присваивает ей значение 10
            classname.FirstProp = 5; // меняет значение переменной _a
            classname.SecondProp = 4; // меняет значение переменно _b 
            classname.iB = 2; // меняем значение публичной переменной простым присваиванием без использования свойств
            Console.WriteLine("Свойства применены\n");

            Console.WriteLine("\nВыводим на консоль значения переменных iB={0}, _a={1} ", classname.iB, classname.FirstProp);
            // второй способ работы с методом WriteLine, символ \n предназначен для перевода строки вручную
            Console.WriteLine("Выводим на консоль значения переменных iB=" + classname.iB + ", _b=" + classname.SecondProp);

            // для подсчета суммы используем метод Sum, в качестве переменных подставляем наши свойства
            // так же отображаем тип выводимых дынных с помощью статического метода GetType() заметьте метод всегда со скобками "метод()" 
            // нотация FLC это jpyfxftn что отображение типов данных происходит не из языка C# а из .Net 
            // не просто int а именно Int32, потому как int может быть и Int64
            Console.WriteLine("Сумма переменных _a и _b типа " + classname.FirstProp.GetType() + " в нотации FLC, равна: " + classname.Sum(classname.FirstProp, classname.SecondProp));

            Console.WriteLine("\n\n\nОбъекты:");

            // работа с объектами 
            // как видно мы определили две ссылки разного типа ClassName и Object но создающие объект одного типа ClassName
            // давайте посмотрим как они работают

            // выше мы уже определили переменные в нашем объекте по ссылке classname
            // давайте проделаем тоже но уже с объектом по ссылке newobject




            // метод ждет ввод от пользователя считывает код клавиши 
            //просто заглушка для демонстрации работы программы 
            Console.ReadKey(); // статический метод т.е. метод вызывать который можно без создания экземпляра (объекта в памяти) класса которому он принадлежит
        }
    }

    // - это символы комментирования 
    class ClassName //объявление класса с именем ClassName
    {
        // поля класса

        private int _b; //по умолчанию все переменный private т.е. видны только для методов внутри класса. символ "_" - чисто нотация для внутренних переменных.
        public int iB;  //iB переменная доступная для изменений из других методов и объектов.


        //свойтсва 

        //автоматическое свойство (скорее всего создает переменную для хранения на лету и заполняет ее нолями)
        // создается путем ввода с клавы букв prop и нажатия на tab 2 раза, вставляется snippet - шаблон кода 
        public int AutoPorp { get; set; } //автоматическое свойство, свойства всегда открыты для доступа всегда public используется для работы с интерфейсами, делегатами и событиями


        // полное свойство
        private int _a; // переменная с закрытым из вне доступом переменные описаны чуть выше
        public int FirstProp // открытое свойство 
        { //символ начала описания сущности
            get { return _a; }  //метод get по умолчанию  возвращающий значение переменной _a
            set { _a = value; } // метод set по умолчанию устанавливающий значение переменной _a, 
            // так же используется переменная посредник "value" которая всегда хранит в себе данные для записи в нашу переменную
        } // символ окончания описания  сущности


        public int SecondProp
        {
            get { return _b; }
            set { _b = value; }
        }




        // конструкторы
        // создадим метод для предопределения наших переменных проще всего это сделать конструктором
        // конструктор это метод который вызывается автоматически при создании экземпляра нашего класса
        public ClassName()
        {
            //предопределим значения наших переменных
            _a = 1;
            _b = 2;
            iB = 3;
        }

        //методы класса

        void _SomeMethod() //определение метода, который ничего не принимает и не передает, доступен для использовании только внутри класса
        {
            //тут что то делает
        }

        public int Sum(int a, int b) //метод доступный для вызова вне класса принимает 2 переменные типа целого числа со знаком, и возвращает целое число 
        {
            // тут что угодно, можно было написать и так 
            int result;
            result = a + b;
            return result; //можно заменить на  "return a + b"; 

            // в методы передается только ссылки на переменные, данные находящиеся в самих переменных не меняет для этого есть свойства.
        }



    }


}

